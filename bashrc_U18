# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# colored GCC warnings and errors
#export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# some more ls aliases
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'

# For git
alias gitlog='git log --graph --pretty --oneline --decorate'
alias gitco='git checkout'



# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

# The following are added by Jia Wan

# To use OASE toolbox
# This is the old path in VM
# export PYTHONPATH=$PYTHONPATH:/home/jiawan/OneDrive/02_FlandersMake/01_Project/01_Inwaredrones/02_Work/09_gitrepo:/home/jiawan/OneDrive/02_FlandersMake/01_Project/01b_SmartCON/02_Work

# For dual boot
# The root path to libraries
LIBPATH=/home/jiawan/Documents/02_FlandersMake/01_Project/91_Lib/drone_lib_ros2/

# COASEPATH=$LIBPATH/oase-binaries/linux-x64/python/3.8

# COASEPATH=/home/jiawan/Document/02_FlandersMake/01_Project/91_Lib/COASE/build/binaries/python
# COASEPATH=/home/jiawan/Documents/02_FlandersMake/01_Project/91_Lib/oase_binary/test/linux-x64/python/3.8
# COASEPATH=/home/jiawan/Documents/02_FlandersMake/01_Project/91_Lib/oase_binary/v1p1/linux-x64/python/3.8
#
COASEPATH=$LIBPATH/oase_binary/dev/linux-x64/python/3.10
PYOASEPATH=$LIBPATH/PyOASE
VEGAPATH=$LIBPATH/VEGA
SUNDAEPATH=$LIBPATH/SUNDAE
IWDPATH=$LIBPATH/InWareDrones
UWBPATH=$LIBPATH/decawave_library
UWBPATH2=/home/jiawan/Documents/02_FlandersMake/01_Project/91_Lib/drone_lib_ros2/decawave_ros2/UWB

export PYTHONPATH=$PYTHONPATH:$IWDPATH:$LIBPATH:$COASEPATH:\
$PYOASEPATH:$VEGAPATH:$UWBPATH:$LIBPATH/temp_module:$SUNDAEPATH:$UWBPATH2

# fzf
[ -f ~/.fzf.bash ] && source ~/.fzf.bash

# ROS
# source /opt/ros/melodic/setup.bash

# for ArduPilot
# source /home/jiawan/repos/ardupilot/Tools/completion/completion.bash
# export PATH=$PATH:$HOME/ardupilot/Tools/autotest
# export PATH=/usr/lib/ccache:$PATH
export PATH=$PATH:/home/jiawan/Data/android-studio/bin


source /usr/share/bash-completion/bash_completion

# test for  PS1

# Trim ps1
PROMPT_DIRTRIM=3

function py_env {

    if [ -z "$VIRTUAL_ENV" ];
    then
        echo ""
    else
        echo "[$(basename $VIRTUAL_ENV)]"
    fi
}

git_branch() {
     git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/(\1)/'
}

C1='\[\033[01;32m\]'
C2='\[\033[01;34m\]'
C3='\[\033[01;36m\]'
C4='\[\033[01;35m\]'
CE='\[\033[00m\]'

export PS1="$C1╭\u@\h$CE:$C2\w$C3`py_env`$C4$(git_branch)\n$C1╰(\A)\$$CE "
# PS1='\033[01;32m╭\u@\h\[\033[00m\]:\[\033[01;34m\]\w\033[01;36m`py_env``git_branch`\n╰(\A)\$\[\033[00m\] '

VIRTUAL_ENV_DISABLE_PROMPT=False

get_ps1() {
    export PS1="$C1╭\u@\h$CE:$C2\w$C3`py_env`$C4$(git_branch)\n$C1╰o[\A]\$$CE "
}

export PROMPT_COMMAND=get_ps1

bind 'set show-all-if-ambiguous on'
# bind 'TAB:menu-complete'

# source ~/.fonts/*.sh

# For Go
export PATH=$PATH:/usr/local/go/bin

export PATH=$PATH:/home/jiawan/bin

# export LD_LIBRARY_PATH=/usr/local/lib/vtk-5.10
export LD_LIBRARY_PATH=/usr/local/lib

# to use autojump
# This one must be after the PS1 setting
. /usr/share/autojump/autojump.sh

export LANG=en_US.UTF-8

# For TAB
# If there are multiple matches for completion, Tab should cycle through them
bind 'TAB':menu-complete

# Display a list of the matching files
bind "set show-all-if-ambiguous on"

# Perform partial completion on the first Tab press,
# only start cycling full results on the second Tab press
bind "set menu-complete-display-prefix on"

export LD_LIBRARY_PATH=/usr/local/lib:/usr/local/lib/
export TCLLIBPATH=/usr/local/bin

# source /home/jiawan/Data/repos/ardupilot/Tools/completion/completion.bash
# source /home/jiawan/Data/repos/ardupilot/Tools/completion/completion.bash

# Anafi AI 
#
alias anafi_sim_reset='sphinx-cli action -m world fwman world_reset_all'


# For ROS
# The following alias make it easier to start the Ardupilot SITL
alias sitl_copter='sim_vehicle.py -v ArduCopter --console --map -L Leuven -I 1 --sysid=1 --out "127.0.0.1:14601"'
alias sitl_rover='sim_vehicle.py -v Rover --console --map -L Leuven -I 2 --sysid=2 --out "127.0.0.1:14602"'

alias sitl_master_rover='sim_vehicle.py -v Rover --console --map -L Leuven -I 1 --sysid=1 --out "127.0.0.1:14601"'
alias sitl_slave_copter='sim_vehicle.py -v ArduCopter --console --map -L Leuven -I 2 --sysid=2 --out "127.0.0.1:14602"'

# Start mavproxy for two SITL, check the udp if not working
alias mp_for_2='mavproxy.py --master "udp:127.0.0.1:14571" --master "udp:127.0.0.1:14561" --map --console'

alias mavros_master='roslaunch drone_gnc_launch apm_ns.launch ns:="master" fcu_url:="udp://127.0.0.1:14560@" tgt_system:="1"'

alias mavros_slave='roslaunch drone_gnc_launch apm_ns.launch ns:="slave" fcu_url:="udp://127.0.0.1:14570@" tgt_system:="2"'

alias anafi_sim='sphinx "/home/jiawan/Documents/02_FlandersMake/01_Project/91_Lib/drone_lib/olympe_ros/playground/anafi_ai.drone"'

# ROS1
# source /opt/ros/noetic/setup.bash
# source ~/ros_ws/ros1_ws/devel/setup.bash

# ROS2
source /opt/ros/humble/setup.bash
source ~/ros_ws/ros2_ws/install/setup.bash

# export ROS_DOMAIN_ID=0

export PKG_CONFIG_PATH=$PKG_CONFIG_PATH:/usr/lib/x86_64-linux-gnu/pkgconfig/

# export PATH=$PATH:/home/jiawan/Data/android-studio/bin:\
# /home/jiawan/Document/02_FlandersMake/01_Project/91_Lib/VEGA/cml_tool

source /home/jiawan/Repos/ardupilot/Tools/completion/completion.bash
export PICO_SDK_PATH=/home/jiawan/Documents/apps/pico/pico-sdk
export PICO_EXAMPLES_PATH=/home/jiawan/Documents/apps/pico/pico-examples
export PICO_EXTRAS_PATH=/home/jiawan/Documents/apps/pico/pico-extras
export PICO_PLAYGROUND_PATH=/home/jiawan/Documents/apps/pico/pico-playground
source /home/jiawan/Repos/ardupilot/Tools/completion/completion.bash

export PATH=/home/jiawan/.nexustools:$PATH

